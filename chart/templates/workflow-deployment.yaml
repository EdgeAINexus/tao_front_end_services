# Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-workflow-pod
  namespace: {{ .Release.Namespace }}
  labels:
    name: {{ .Release.Name }}-workflow-pod
spec:
  replicas: 1
  selector:
    matchLabels:
      name: {{ .Release.Name }}-workflow-pod
  template:
    metadata:
{{- if .Values.enableVault }}
      {{- with.Values.vault.pod.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
        {{- end }}
{{- end }}
      name: {{ .Release.Name }}-workflow-pod
      namespace: {{ .Release.Namespace }}
      labels:
        name: {{ .Release.Name }}-workflow-pod
    spec:
      containers:
      - name: {{ .Release.Name }}-workflow
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        securityContext:
          privileged: true
        imagePullPolicy: {{ .Values.imagePullPolicy | default "Always" }}
        env:
        - name: NAMESPACE
          value: {{ .Release.Namespace | quote }}
        - name: CLAIMNAME
          value: "{{ .Release.Name }}-pvc"
        - name: IMAGEPULLSECRET
          value: {{ .Values.imagePullSecret | default "imagepullsecret" | quote }}
        - name: HOSTBASEURL
          value: {{ .Values.hostBaseUrl | default "no_url" | quote }}
        - name: CALLBACK_UUID
          value: {{ .Values.serviceAdminUUID | default "02a55e1e-0091-4711-b29e-12a61c0d29bf" | quote }}
        - name: NUM_GPU_PER_NODE
          value: {{ .Values.maxNumGpuPerNode | default "1" | quote }}
        - name: TELEMETRY_OPT_OUT
          value: {{ .Values.telemetryOptOut | default "no" | quote }}
        - name: BACKEND
          value: {{ .Values.backend | default "local-k8s" | quote }}
        - name: IMAGE_TAO_PYTORCH
          value: {{ .Values.imagePyt | default "nvcr.io/nvidia/tao/tao-toolkit:5.5.0-pyt" | quote }}
        - name: IMAGE_TAO_TF2
          value: {{ .Values.imageTf2 | default "nvcr.io/nvidia/tao/tao-toolkit:5.0.0-tf2.11.0" | quote }}
        - name: IMAGE_TAO_DEPLOY
          value: {{ .Values.imageTaoDeploy | default "nvcr.io/nvidia/tao/tao-toolkit:5.5.0-deploy" | quote }}
        - name: IMAGE_DEFAULT
          value: {{ .Values.imageDefault | default "nvcr.io/nvidia/tao/tao-toolkit:5.5.0-pyt" | quote }}
        - name: IMAGE_API
          value: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        - name: IMAGE_TAO_DS
          value: {{ .Values.imageDataservices | default "nvcr.io/nvidia/tao/tao-toolkit:5.5.0-data-services" | quote }}
        - name: FUNCTION_TAO_PYTORCH
          value: {{ .Values.functionTaoPyt | default "" | quote }}
        - name: FUNCTION_TAO_TF2
          value: {{ .Values.functionTaoTf2 | default "" | quote }}
        - name: FUNCTION_TAO_DEPLOY
          value: {{ .Values.functionTaoDeploy | default "" | quote }}
        - name: FUNCTION_DEFAULT
          value: {{ .Values.functionDefault | default "" | quote }}
        - name: FUNCTION_TAO_DS
          value: {{ .Values.functionTaoDataservices | default "" | quote }}
        - name: PYTHONIOENCODING 
          value: utf-8
        - name: LC_ALL 
          value: C.UTF-8 
{{- if .Values.httpsProxy }}
        - name: HTTPS_PROXY
          value: {{ .Values.httpsProxy | default "" | quote }}
        - name: https_proxy
          value: {{ .Values.httpsProxy | default "" | quote }}
{{- end }}
{{- if .Values.myCertConfig }}
        - name: CURL_CA_BUNDLE
          value: "/etc/ssl/certs/ca-certificates.crt"
        - name: REQUESTS_CA_BUNDLE
          value: "/etc/ssl/certs/ca-certificates.crt"
        - name: SSL_CERT_FILE
          value: "/etc/ssl/certs/ca-certificates.crt"
{{- end }}
{{- if .Values.enableVault }}
        - name: VAULT_SECRET_PATH
          value: "{{ .Values.vault.secretMountPath }}"
{{- end }}
        - name: DEPLOYMENT_MODE
          value: {{ .Values.deploymentMode | default "PROD" | quote }}
        command: ["/bin/bash", "workflow_start.sh"]
        volumeMounts:
        - name: shared-data
          mountPath: /shared
{{- if .Values.enableVault }}
        - name: token
          mountPath: {{ .Values.vault.volumeMounts.tokenPath }}
{{- end }}
{{- if .Values.myCertConfig }}
        - name: my-cert
          mountPath: /usr/local/share/ca-certificates/
{{- end }}
{{- if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret }}
{{- end }}
      volumes:
      - name: shared-data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-pvc
{{- if .Values.enableVault }}
      - name: token
        projected:
          sources:
            - serviceAccountToken:
                audience: {{ .Values.vault.volumes.projected.serviceAccountToken.audience }}:443
                expirationSeconds: 3600
                path: token
{{- end }}
{{- if .Values.myCertConfig }}
      - name: my-cert
        configMap:
          name: {{ .Values.myCertConfig }}
          items:
          - key: my-cert.crt
            path: my-cert.crt
{{- end }}
      terminationGracePeriodSeconds: 3
